{"version":3,"sources":["javascript/ApiManager.js","components/WeatherDisplay.js","components/App.js","index.js"],"names":["ApiManager","getWeatherCS","a","city","state","unit","paragraph","fetch","htmlResponse","body","getReader","reader","read","readUint8Array","value","val","String","fromCharCode","JSON","parse","getWeatherCoord","lat","lon","WeatherDisplay","props","bgColor","temperature","loc","humidity","pressure","high","low","tempType","roundUp","bind","farheniteToCelcius","farheniteToKelvin","setTempType","setBgColor","num","Math","round","Number","EPSILON","this","event","setState","target","temp","tempNum","data","weatherData","main","temp_max","temp_min","name","className","onClick","src","alt","React","Component","App","result","handleStateChange","handleCityChange","handleSubmit","preventDefault","then","response","cod","navigator","geolocation","getCurrentPosition","location","coords","latitude","longitude","onSubmit","type","onChange","placeholder","href","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d93085c5.chunk.js","sourcesContent":["let ApiManager = (function(){\r\n    return {\r\n        /**\r\n         * returns a promise which will have a json value with weather info related to input param.\r\n         * \r\n         * use .then after calling this function to get response.\r\n         * \r\n         * @param {city,state} param0 \r\n         */\r\n        getWeatherCS:  async function cityAndStateApiCall({city,state,unit=\"imperial\"}){\r\n            let paragraph = '';\r\n            let htmlResponse = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${state}&appid=75685a105e4030cddbdf93dfd89f6fe9&units=${unit}`)\r\n            let reader = await htmlResponse.body.getReader();\r\n            let readUint8Array = await reader.read();\r\n            for(let val of readUint8Array.value){\r\n                paragraph += String.fromCharCode(val);\r\n            }\r\n            \r\n            return await JSON.parse(paragraph);\r\n        },\r\n\r\n\r\n        \r\n        getWeatherCoord:  async function longAndLatApiCall({lat,lon,unit=\"imperial\"}){\r\n            let paragraph = '';\r\n            let htmlResponse = await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=75685a105e4030cddbdf93dfd89f6fe9&units=${unit}`)\r\n            let reader = await htmlResponse.body.getReader();\r\n            let readUint8Array = await reader.read();\r\n            for(let val of readUint8Array.value){\r\n                paragraph += String.fromCharCode(val);\r\n            }\r\n            \r\n            return await JSON.parse(paragraph);\r\n        }\r\n    }\r\n})();\r\n\r\nexport {ApiManager};","import React from \"react\";\r\nimport \"../cssFiles/WeatherDisplay.css\";\r\nclass WeatherDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.bgColor = \"\";\r\n\r\n    this.temperature = \"-\";\r\n    this.loc = \"-\";\r\n    this.humidity = \"-\";\r\n    this.pressure = \"-\";\r\n    this.high = \"-\";\r\n    this.low = \"-\";\r\n\r\n    this.state = {\r\n      tempType: \"F\",\r\n    };\r\n\r\n    this.roundUp = this.roundUp.bind(this);\r\n    this.farheniteToCelcius = this.farheniteToCelcius.bind(this);\r\n    this.farheniteToKelvin = this.farheniteToKelvin.bind(this);\r\n    this.setTempType = this.setTempType.bind(this);\r\n    this.setBgColor = this.setBgColor.bind(this);\r\n  }\r\n\r\n  roundUp(num) {\r\n    return Math.round((num + Number.EPSILON) * 100) / 100;\r\n  }\r\n\r\n  farheniteToCelcius(temperature) {\r\n    return this.roundUp((Number(temperature) - 32) * (5 / 9));\r\n  }\r\n\r\n  farheniteToKelvin(temperature) {\r\n    return this.roundUp(this.farheniteToCelcius(temperature) + 273.15);\r\n  }\r\n\r\n  setTemp(temperature) {\r\n    if (this.state.tempType === \"F\") return temperature + \"° F\";\r\n  }\r\n\r\n  setTempType(event) {\r\n    this.setState({\r\n      tempType: event.target.value,\r\n    });\r\n  }\r\n\r\n  setBgColor(temp) {\r\n    let tempNum = Number(temp); //REPLACE WITH HEX?\r\n    if (tempNum >= 100) return \"clRed\";\r\n    if (tempNum >= 80) return \"clOrange\";\r\n    if (tempNum >= 60) return \"clYellow\";\r\n    if (tempNum >= 40) return \"clGreen\";\r\n    if (tempNum >= 0) return \"clBlue\";\r\n  }\r\n\r\n  render() {\r\n    let data = this.props.weatherData ? this.props.weatherData : \"-\";\r\n\r\n    if (data !== \"-\") {\r\n      if (this.state.tempType === \"F\") {\r\n        this.temperature = data.main.temp + \"° F\";\r\n        this.high = data.main.temp_max + \"° F\";\r\n        this.low = data.main.temp_min + \"° F\";\r\n      }\r\n      if (this.state.tempType === \"C\") {\r\n        this.temperature = this.farheniteToCelcius(data.main.temp) + \"° C\";\r\n        this.high = this.farheniteToCelcius(data.main.temp_max) + \"° C\";\r\n        this.low = this.farheniteToCelcius(data.main.temp_min) + \"° C\";\r\n      }\r\n      if (this.state.tempType === \"K\") {\r\n        this.temperature = this.farheniteToKelvin(data.main.temp) + \"° K\";\r\n        this.high = this.farheniteToKelvin(data.main.temp_max) + \"° K\";\r\n        this.low = this.farheniteToKelvin(data.main.temp_min) + \"° K\";\r\n      }\r\n      this.humidity = data.main.humidity;\r\n      this.pressure = data.main.pressure;\r\n      this.loc = data.name;\r\n      this.bgColor = this.setBgColor(data.main.temp);\r\n    }\r\n\r\n    return (\r\n      <div className={data === \"-\" ? \"hide\" : \"weatherDisplay\"}>\r\n        <div className=\"temperatureBlock\">\r\n          <div className={\"temperature \" + this.bgColor}>\r\n            {this.temperature}\r\n          </div>\r\n          <div className=\"tempTypeBtns\">\r\n            <button\r\n              className={\r\n                \"btn btn-outline-primary degBtn \" + this.bgColor + \"Btn\"\r\n              }\r\n              onClick={this.setTempType}\r\n              value=\"F\"\r\n            >\r\n              F\r\n            </button>\r\n            <button\r\n              className={\r\n                \"btn btn-outline-primary degBtn \" + this.bgColor + \"Btn\"\r\n              }\r\n              onClick={this.setTempType}\r\n              value=\"C\"\r\n            >\r\n              C\r\n            </button>\r\n            <button\r\n              className={\r\n                \"btn btn-outline-primary degBtn \" + this.bgColor + \"Btn\"\r\n              }\r\n              onClick={this.setTempType}\r\n              value=\"K\"\r\n            >\r\n              K\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"extraDataBlock\">\r\n          <div className=\"extraDataContent\">\r\n            <div className=\"exDataLoc exData\">Location: {this.loc}</div>\r\n            <div className=\"exDataHigh exData\">\r\n              <img\r\n                src=\"https://www.pikpng.com/pngl/m/30-302902_green-arrow-up-arrow-up-green-png-clipart.png\"\r\n                alt=\"daily high\"\r\n              ></img>\r\n              High: {this.high}\r\n            </div>\r\n            <div className=\"exDataLow exData\">\r\n              <img\r\n                src=\"https://www.pngitem.com/pimgs/m/252-2523331_transparent-downvote-png-red-arrow-down-png-png.png\"\r\n                alt=\"daily low\"\r\n              ></img>\r\n              Low: {this.low}\r\n            </div>\r\n            <div className=\"exDataHumid exData\">\r\n              {\" \"}\r\n              <img\r\n                src=\"https://cdn.iconscout.com/icon/free/png-256/humidity-forecast-hydration-precipitation-temperature-weather-38924.png\"\r\n                alt=\"humidity icon\"\r\n              ></img>\r\n              Humidity: {this.humidity}\r\n            </div>\r\n            <div className=\"exDataPress exData\">\r\n              {\" \"}\r\n              <img\r\n                src=\"https://static.renishaw.net/media/thumbnails/240high/129c82e21f9c44e584c361b7a59f3ca1.jpg\"\r\n                alt=\"pressure icon\"\r\n              ></img>\r\n              Pressure: {this.pressure}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { WeatherDisplay };\r\n","import React from \"react\";\r\nimport { ApiManager } from \"../javascript/ApiManager\";\r\nimport { WeatherDisplay } from \"./WeatherDisplay\";\r\nimport \"../cssFiles/App.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      state: \"\",\r\n      city: \"\",\r\n      data: \"\",\r\n    };\r\n\r\n    this.result = \"\";\r\n\r\n    this.handleStateChange = this.handleStateChange.bind(this);\r\n    this.handleCityChange = this.handleCityChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleStateChange(event) {\r\n    this.setState({\r\n      state: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleCityChange(event) {\r\n    this.setState({\r\n      city: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    ApiManager.getWeatherCS({\r\n      city: this.state.city,\r\n      state: this.state.state,\r\n    }).then((response) => {\r\n      if(response.cod !== \"404\")\r\n      {\r\n      this.setState({\r\n        data: response,\r\n        city: \"\",\r\n        state: \"\",\r\n      });\r\n    }\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    let geo = navigator.geolocation;\r\n    geo.getCurrentPosition((location) => {\r\n      ApiManager.getWeatherCoord({\r\n        lat: location.coords.latitude,\r\n        lon: location.coords.longitude,\r\n      }).then((response) => {\r\n        this.setState({\r\n          data: response,\r\n          city: \"\",\r\n          state: \"\",\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n    <header>React Weather</header>\r\n\r\n      <div className=\"appSearch\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.state}\r\n            onChange={this.handleStateChange}\r\n            placeholder=\"City\"\r\n          ></input>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.city}\r\n            onChange={this.handleCityChange}\r\n            placeholder=\"State\"\r\n          ></input>\r\n          <input type=\"submit\" className=\"btn btn-success\"/>\r\n        </form>\r\n        </div>\r\n        <div className=\"appDisplay\">\r\n        <WeatherDisplay weatherData={this.state.data} />\r\n        </div>\r\n        \r\n        <footer>\r\n\r\n      <div className=\"foot\">\r\n        <a target=\"_blank\" href=\"https://github.com/GreenRamSilgen\"\r\n          ><i\r\n            className=\"fab fa-github-square fa-lg foot__icons\"\r\n            title=\"My Github\"\r\n          ></i\r\n        ></a>\r\n        <a\r\n          target=\"_blank\"\r\n          href=\"https://github.com/GreenRamSilgen/ReactWeather\"\r\n          ><i className=\"fas fa-code fa-lg foot__icons\" title=\"Source Code\"></i\r\n        ></a>\r\n      </div>\r\n    </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './cssFiles/index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}